
mmul.a64:     file format elf64-littleaarch64
mmul.a64
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000000100

Program Header:
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**16
         filesz 0x000000000000019c memsz 0x000000000000019c flags r-x
    LOAD off    0x000000000000019c vaddr 0x000000000001019c paddr 0x000000000001019c align 2**16
         filesz 0x0000000000008000 memsz 0x0000000000010004 flags rw-
private flags = 0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000009c  0000000000000100  0000000000000100  00000100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00008000  000000000001019c  000000000001019c  0000019c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00008000  00000000000181a0  00000000000181a0  0000819c  2**3
                  ALLOC
  3 .comment      00000015  0000000000000000  0000000000000000  0000819c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0000000000000100 l    d  .text	0000000000000000 .text
000000000001019c l    d  .data	0000000000000000 .data
00000000000181a0 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    df *ABS*	0000000000000000 mmul.c
00000000000181a0 l     O .bss	0000000000008000 product
00000000000201a0 g       .bss	0000000000000000 _bss_end__
000000000001819c g       .bss	0000000000000000 __bss_start__
000000000001019c g     O .data	0000000000004000 mats64_1
00000000000201a0 g       .bss	0000000000000000 __bss_end__
000000000001819c g       .bss	0000000000000000 __bss_start
0000000000000100 g     F .text	000000000000009c main
00000000000201a0 g       .bss	0000000000000000 __end__
000000000001419c g     O .data	0000000000004000 mats64_2
000000000001819c g       .data	0000000000000000 _edata
00000000000201a0 g       .bss	0000000000000000 _end
0000000000080000 g       .comment	0000000000000000 _stack
000000000001019c g       .data	0000000000000000 __data_start



Disassembly of section .text:

0000000000000100 <main>:
 100:	aa1f03e8 	mov	x8, xzr
 104:	90000089 	adrp	x9, 10000 <main+0xff00>
 108:	91067129 	add	x9, x9, #0x19c
 10c:	900000ca 	adrp	x10, 18000 <mats64_2+0x3e64>
 110:	9106814a 	add	x10, x10, #0x1a0
 114:	900000ab 	adrp	x11, 14000 <__data_start+0x3e64>
 118:	9106716b 	add	x11, x11, #0x19c
 11c:	aa1f03ec 	mov	x12, xzr
 120:	aa1f03ee 	mov	x14, xzr
 124:	8b08254d 	add	x13, x10, x8, lsl #9
 128:	8b0c0dad 	add	x13, x13, x12, lsl #3
 12c:	f94001af 	ldr	x15, [x13]
 130:	aa0903f0 	mov	x16, x9
 134:	b8404611 	ldr	w17, [x16],#4
 138:	8b0e0172 	add	x18, x11, x14
 13c:	b86c7a52 	ldr	w18, [x18,x12,lsl #2]
 140:	1b117e51 	mul	w17, w18, w17
 144:	8b31c1ef 	add	x15, x15, w17, sxtw
 148:	910401ce 	add	x14, x14, #0x100
 14c:	f14011df 	cmp	x14, #0x4, lsl #12
 150:	54ffff21 	b.ne	134 <main+0x34>
 154:	f90001af 	str	x15, [x13]
 158:	9100058c 	add	x12, x12, #0x1
 15c:	f101019f 	cmp	x12, #0x40
 160:	54fffe01 	b.ne	120 <main+0x20>
 164:	91000508 	add	x8, x8, #0x1
 168:	91040129 	add	x9, x9, #0x100
 16c:	f101011f 	cmp	x8, #0x40
 170:	54fffd61 	b.ne	11c <main+0x1c>
 174:	f9420948 	ldr	x8, [x10,#1040]
 178:	d2f88229 	mov	x9, #0xc411000000000000    	// #-4318670567671595008
 17c:	f2d3b2a9 	movk	x9, #0x9d95, lsl #32
 180:	f2a50cc9 	movk	x9, #0x2866, lsl #16
 184:	f2942729 	movk	x9, #0xa139
 188:	9bc97d09 	umulh	x9, x8, x9
 18c:	d34afd29 	lsr	x9, x9, #10
 190:	5280a72a 	mov	w10, #0x539                 	// #1337
 194:	1b0aa120 	msub	w0, w9, w10, w8
 198:	d65f03c0 	ret
